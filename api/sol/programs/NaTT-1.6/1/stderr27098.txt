Input TRS:
    1: eq(0(),0()) -> true()
    2: eq(0(),s(X)) -> false()
    3: eq(s(Y),0()) -> false()
    4: eq(s(U),s(V)) -> eq(U,V)
    5: le(0(),W) -> true()
    6: le(s(P),0()) -> false()
    7: le(s(X1),s(Y1)) -> le(X1,Y1)
    8: app(nil(),U1) -> U1
    9: app(add(V1,W1),P1) -> add(V1,app(W1,P1))
    10: min(add(X2,nil())) -> X2
    11: min(add(U2,add(Y2,V2))) -> ifP(le(U2,Y2),min(add(U2,V2)),min(add(Y2,V2)))
    12: rm(W3,nil()) -> nil()
    13: rm(X4,add(P3,Y4)) -> ifS(eq(X4,P3),rm(X4,Y4),add(P3,rm(X4,Y4)))
    14: ifxb6220rm(true(),V4,add(U4,W4)) -> rm(V4,W4)
    15: ifxb6220rm(false(),X5,add(P4,Y5)) -> add(P4,rm(X5,Y5))
    16: minsort(nil(),nil()) -> nil()
    17: minsort(add(U5,V5),W5) -> ifD(eq(U5,min(add(U5,V5))),add(U5,minsort(app(rm(U5,V5),W5),nil())),minsort(V5,add(U5,W5)))
    18: ifxb6220minsort(true(),add(P5,X6),Y6) -> add(P5,minsort(app(rm(P5,X6),Y6),nil()))
    19: ifxb6220minsort(false(),add(U6,V6),W6) -> minsort(V6,add(U6,W6))
    20: ifxb6220min(true(),add(P2,add(W2,X3))) -> min(add(P2,X3))
    21: ifxb6220min(false(),add(U3,add(Y3,V3))) -> min(add(Y3,V3))
    22: ifP(true(),T,E) -> T
    23: ifP(false(),T,E) -> E
    24: ifS(true(),T,E) -> T
    25: ifS(false(),T,E) -> E
    26: ifD(true(),T,E) -> T
    27: ifD(false(),T,E) -> E
    28: _(X1,X2) -> X1
    29: _(X1,X2) -> X2
Number of strict rules: 29
Direct POLO(bPol) ... failed.
Uncurrying min
1: eq(0(),0()) -> true()
2: eq(0(),s(X)) -> false()
3: eq(s(Y),0()) -> false()
4: eq(s(U),s(V)) -> eq(U,V)
5: le(0(),W) -> true()
6: le(s(P),0()) -> false()
7: le(s(X1),s(Y1)) -> le(X1,Y1)
8: app(nil(),U1) -> U1
9: app(add(V1,W1),P1) -> add(V1,app(W1,P1))
10: min^1_add(X2,nil()) -> X2
11: min^1_add(U2,add(Y2,V2)) -> ifP(le(U2,Y2),min^1_add(U2,V2),min^1_add(Y2,V2))
12: rm(W3,nil()) -> nil()
13: rm(X4,add(P3,Y4)) -> ifS(eq(X4,P3),rm(X4,Y4),add(P3,rm(X4,Y4)))
14: ifxb6220rm(true(),V4,add(U4,W4)) -> rm(V4,W4)
15: ifxb6220rm(false(),X5,add(P4,Y5)) -> add(P4,rm(X5,Y5))
16: minsort(nil(),nil()) -> nil()
17: minsort(add(U5,V5),W5) -> ifD(eq(U5,min^1_add(U5,V5)),add(U5,minsort(app(rm(U5,V5),W5),nil())),minsort(V5,add(U5,W5)))
18: ifxb6220minsort(true(),add(P5,X6),Y6) -> add(P5,minsort(app(rm(P5,X6),Y6),nil()))
19: ifxb6220minsort(false(),add(U6,V6),W6) -> minsort(V6,add(U6,W6))
20: ifxb6220min(true(),add(P2,add(W2,X3))) -> min^1_add(P2,X3)
21: ifxb6220min(false(),add(U3,add(Y3,V3))) -> min^1_add(Y3,V3)
22: ifP(true(),T,E) -> T
23: ifP(false(),T,E) -> E
24: ifS(true(),T,E) -> T
25: ifS(false(),T,E) -> E
26: ifD(true(),T,E) -> T
27: ifD(false(),T,E) -> E
28: _(X1,X2) -> X1
29: _(X1,X2) -> X2
30: min(add(_1,_2)) ->= min^1_add(_1,_2)
Number of strict rules: 29
Direct POLO(bPol) ... failed.
Dependency Pairs:
   #1: #rm(X4,add(P3,Y4)) -> #ifS(eq(X4,P3),rm(X4,Y4),add(P3,rm(X4,Y4)))
   #2: #rm(X4,add(P3,Y4)) -> #eq(X4,P3)
   #3: #rm(X4,add(P3,Y4)) -> #rm(X4,Y4)
   #4: #rm(X4,add(P3,Y4)) -> #rm(X4,Y4)
   #5: #app(add(V1,W1),P1) -> #app(W1,P1)
   #6: #min^1_add(U2,add(Y2,V2)) -> #ifP(le(U2,Y2),min^1_add(U2,V2),min^1_add(Y2,V2))
   #7: #min^1_add(U2,add(Y2,V2)) -> #le(U2,Y2)
   #8: #min^1_add(U2,add(Y2,V2)) -> #min^1_add(U2,V2)
   #9: #min^1_add(U2,add(Y2,V2)) -> #min^1_add(Y2,V2)
   #10: #ifxb6220rm(true(),V4,add(U4,W4)) -> #rm(V4,W4)
   #11: #min(add(_1,_2)) ->? #min^1_add(_1,_2)
   #12: #ifxb6220min(true(),add(P2,add(W2,X3))) -> #min^1_add(P2,X3)
   #13: #le(s(X1),s(Y1)) -> #le(X1,Y1)
   #14: #minsort(add(U5,V5),W5) -> #ifD(eq(U5,min^1_add(U5,V5)),add(U5,minsort(app(rm(U5,V5),W5),nil())),minsort(V5,add(U5,W5)))
   #15: #minsort(add(U5,V5),W5) -> #eq(U5,min^1_add(U5,V5))
   #16: #minsort(add(U5,V5),W5) -> #min^1_add(U5,V5)
   #17: #minsort(add(U5,V5),W5) -> #minsort(app(rm(U5,V5),W5),nil())
   #18: #minsort(add(U5,V5),W5) -> #app(rm(U5,V5),W5)
   #19: #minsort(add(U5,V5),W5) -> #rm(U5,V5)
   #20: #minsort(add(U5,V5),W5) -> #minsort(V5,add(U5,W5))
   #21: #ifxb6220minsort(false(),add(U6,V6),W6) -> #minsort(V6,add(U6,W6))
   #22: #ifxb6220min(false(),add(U3,add(Y3,V3))) -> #min^1_add(Y3,V3)
   #23: #ifxb6220rm(false(),X5,add(P4,Y5)) -> #rm(X5,Y5)
   #24: #eq(s(U),s(V)) -> #eq(U,V)
   #25: #ifxb6220minsort(true(),add(P5,X6),Y6) -> #minsort(app(rm(P5,X6),Y6),nil())
   #26: #ifxb6220minsort(true(),add(P5,X6),Y6) -> #app(rm(P5,X6),Y6)
   #27: #ifxb6220minsort(true(),add(P5,X6),Y6) -> #rm(P5,X6)
Number of SCCs: 6, DPs: 9
  SCC { #13 }
POLO(Sum)... succeeded.
      le	w: 0
      s 	w: x1 + 1
      #le	w: x1 + x2
      #ifxb6220min	w: 0
      ifS	w: 0
      ifxb6220rm	w: 0
      eq	w: 0
      false	w: 0
      #min	w: 0
      #ifP	w: 0
      #ifxb6220rm	w: 0
      min^1_add	w: 0
      _ 	w: 0
      true	w: 0
      #eq	w: 0
      ifxb6220min	w: 0
      ifxb6220minsort	w: 0
      ifP	w: 0
      0 	w: 0
      nil	w: 0
      #app	w: 0
      #_ 	w: 0
      #ifxb6220minsort	w: 0
      min	w: 0
      #ifD	w: 0
      #ifS	w: 0
      #min^1_add	w: 0
      #minsort	w: 0
      add	w: 0
      ifD	w: 0
      minsort	w: 0
      rm	w: 0
      #rm	w: 0
      app	w: 0
    USABLE RULES: { }
    Removed DPs: #13
Number of SCCs: 5, DPs: 8
  SCC { #5 }
POLO(Sum)... succeeded.
      le	w: 0
      s 	w: 1
      #le	w: 0
      #ifxb6220min	w: 0
      ifS	w: 0
      ifxb6220rm	w: 0
      eq	w: 0
      false	w: 0
      #min	w: 0
      #ifP	w: 0
      #ifxb6220rm	w: 0
      min^1_add	w: 0
      _ 	w: 0
      true	w: 0
      #eq	w: 0
      ifxb6220min	w: 0
      ifxb6220minsort	w: 0
      ifP	w: 0
      0 	w: 0
      nil	w: 0
      #app	w: x1
      #_ 	w: 0
      #ifxb6220minsort	w: 0
      min	w: 0
      #ifD	w: 0
      #ifS	w: 0
      #min^1_add	w: 0
      #minsort	w: 0
      add	w: x2 + 1
      ifD	w: 0
      minsort	w: 0
      rm	w: 0
      #rm	w: 0
      app	w: 0
    USABLE RULES: { }
    Removed DPs: #5
Number of SCCs: 4, DPs: 7
  SCC { #24 }
POLO(Sum)... succeeded.
      le	w: 0
      s 	w: x1 + 1
      #le	w: 0
      #ifxb6220min	w: 0
      ifS	w: 0
      ifxb6220rm	w: 0
      eq	w: 0
      false	w: 0
      #min	w: 0
      #ifP	w: 0
      #ifxb6220rm	w: 0
      min^1_add	w: 0
      _ 	w: 0
      true	w: 0
      #eq	w: x1
      ifxb6220min	w: 0
      ifxb6220minsort	w: 0
      ifP	w: 0
      0 	w: 0
      nil	w: 0
      #app	w: 0
      #_ 	w: 0
      #ifxb6220minsort	w: 0
      min	w: 0
      #ifD	w: 0
      #ifS	w: 0
      #min^1_add	w: 0
      #minsort	w: 0
      add	w: 1
      ifD	w: 0
      minsort	w: 0
      rm	w: 0
      #rm	w: 0
      app	w: 0
    USABLE RULES: { }
    Removed DPs: #24
Number of SCCs: 3, DPs: 6
  SCC { #8 #9 }
POLO(Sum)... succeeded.
      le	w: 0
      s 	w: 1
      #le	w: 0
      #ifxb6220min	w: 0
      ifS	w: 0
      ifxb6220rm	w: 0
      eq	w: 0
      false	w: 0
      #min	w: 0
      #ifP	w: 0
      #ifxb6220rm	w: 0
      min^1_add	w: 0
      _ 	w: 0
      true	w: 0
      #eq	w: 0
      ifxb6220min	w: 0
      ifxb6220minsort	w: 0
      ifP	w: 0
      0 	w: 0
      nil	w: 0
      #app	w: 0
      #_ 	w: 0
      #ifxb6220minsort	w: 0
      min	w: 0
      #ifD	w: 0
      #ifS	w: 0
      #min^1_add	w: x2
      #minsort	w: 0
      add	w: x1 + x2 + 1
      ifD	w: 0
      minsort	w: 0
      rm	w: 0
      #rm	w: 0
      app	w: 0
    USABLE RULES: { }
    Removed DPs: #8 #9
Number of SCCs: 2, DPs: 4
  SCC { #3 #4 }
POLO(Sum)... succeeded.
      le	w: 0
      s 	w: 1
      #le	w: 0
      #ifxb6220min	w: 0
      ifS	w: 0
      ifxb6220rm	w: 0
      eq	w: 0
      false	w: 0
      #min	w: 0
      #ifP	w: 0
      #ifxb6220rm	w: 0
      min^1_add	w: 0
      _ 	w: 0
      true	w: 0
      #eq	w: 0
      ifxb6220min	w: 0
      ifxb6220minsort	w: 0
      ifP	w: 0
      0 	w: 0
      nil	w: 0
      #app	w: 0
      #_ 	w: 0
      #ifxb6220minsort	w: 0
      min	w: 0
      #ifD	w: 0
      #ifS	w: 0
      #min^1_add	w: 0
      #minsort	w: 0
      add	w: x2 + 1
      ifD	w: 0
      minsort	w: 0
      rm	w: 0
      #rm	w: x2
      app	w: 0
    USABLE RULES: { }
    Removed DPs: #3 #4
Number of SCCs: 1, DPs: 2
  SCC { #17 #20 }
POLO(Sum)... POLO(max)... QLPOS... POLO(mSum)... QWPOpS(mSum)... Mat2b... failed.
Finding a loop...  failed.
